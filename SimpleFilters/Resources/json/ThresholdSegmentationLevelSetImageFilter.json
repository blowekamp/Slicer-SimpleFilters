{
  "name" : "ThresholdSegmentationLevelSetImageFilter",
  "template_code_filename" : "ImageFilter",
  "template_test_filename" : "ImageFilter",
  "number_of_inputs" : 2,
  "pixel_types" : "RealPixelIDTypeList",
  "filter_type" : "itk::ThresholdSegmentationLevelSetImageFilter<InputImageType, InputImageType>",
  "custom_set_input" : "filter->SetInput( image1 ); filter->SetFeatureImage( image2 );",
  "members" : [
    {
      "name" : "LowerThreshold",
      "type" : "double",
      "default" : "0.0",
      "pixeltype" : "Input",
      "briefdescriptionSet" : "",
      "detaileddescriptionSet" : "",
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : ""
    },
    {
      "name" : "UpperThreshold",
      "type" : "double",
      "default" : "255.0",
      "pixeltype" : "Input",
      "briefdescriptionSet" : "",
      "detaileddescriptionSet" : "Get/Set the threshold values that will be used to calculate the speed function.\n",
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : ""
    },
    {
      "name" : "MaximumRMSError",
      "type" : "double",
      "default" : 0.02,
      "doc" : "Value of RMS change below which the filter should stop. This is a convergence criterion."
    },
    {
      "name" : "PropagationScaling",
      "type" : "double",
      "default" : "1.0",
      "doc" : "Weight of direct propagation contribution to the speed term"
    },
    {
      "name" : "CurvatureScaling",
      "type" : "double",
      "default" : "1.0",
      "doc" : "Weight of the curvature contribution to the speed term"
    },
    {
      "name" : "NumberOfIterations",
      "type" : "uint32_t",
      "default" : "1000u",
      "doc" : "Number of iterations to run"
    },
    {
      "name" : "ReverseExpansionDirection",
      "type" : "bool",
      "default" : "false",
      "doc" : "Turn On/Off the flag which determines whether Positive or Negative speed terms will cause surface expansion.  If set to TRUE then negative speed terms will cause the surface to expand and positive speed terms will cause the surface to contract.  If set to FALSE (default) then positive speed terms will cause the surface to expand and negative speed terms will cause the surface to contract.  This method can be safely used to reverse the expansion/contraction as appropriate to a particular application or data set."
    }
  ],
  "measurements" : [
    {
      "name" : "ElapsedIterations",
      "type" : "uint32_t",
      "default" : 0,
      "briefdescriptionGet" : "Number of iterations run."
    },
    {
      "name" : "RMSChange",
      "type" : "double",
      "default" : 0.0,
      "briefdescriptionGet" : "The Root Mean Square of the levelset upon termination."
    }
  ],
  "tests" : [
    {
      "tag" : "cthead",
      "description" : "Segmentation of brain in CT",
      "settings" : [
        {
          "parameter" : "LowerThreshold",
          "value" : "76"
        },
        {
          "parameter" : "UpperThreshold",
          "value" : "147"
        }
      ],
      "tolerance" : 0.1,
      "measurements_results" : [
        {
          "name" : "ElapsedIterations",
          "value" : 350,
          "tolerance" : 25
        },
        {
          "name" : "RMSChange",
          "value" : 0.015,
          "tolerance" : 0.005
        }
      ],
      "inputs" : [
        "Input/cthead1-ls-seed.nrrd",
        "Input/cthead1-Float.mha"
      ]
    }
  ],
  "briefdescription" : "Segments structures in images based on intensity values.\n",
  "detaileddescription" : "\\par IMPORTANT\nThe SegmentationLevelSetImageFilterclass and the ThresholdSegmentationLevelSetFunctionclass contain additional information necessary to the full understanding of how to use this filter.\n\\par OVERVIEW\nThis class is a level set method segmentation filter. It constructs a speed function which is close to zero at the upper and lower bounds of an intensity window, effectively locking the propagating front onto those edges. Elsewhere, the front will propagate quickly.\n\\par INPUTS\nThis filter requires two inputs. The first input is a seed image. This seed image must contain an isosurface that you want to use as the seed for your segmentation. It can be a binary, graylevel, or floating point image. The only requirement is that it contain a closed isosurface that you will identify as the seed by setting the IsosurfaceValue parameter of the filter. For a binary image you will want to set your isosurface value halfway between your on and off values (i.e. for 0's and 1's, use an isosurface value of 0.5).\n\\par The second input is the feature image. This is the image from which the speed function will be calculated. For most applications, this is the image that you want to segment. The desired isosurface in your seed image should lie within the region of your feature image that you are trying to segment. Note that this filter does no preprocessing of the feature image before thresholding.\n\\par See SegmentationLevelSetImageFilterfor more information on Inputs.\n\\par OUTPUTS\nThe filter outputs a single, scalar, real-valued image. Positive values in the output image are inside the segmentated region and negative values in the image are outside of the inside region. The zero crossings of the image correspond to the position of the level set front.\n\\par See SparseFieldLevelSetImageFilterand SegmentationLevelSetImageFilterfor more information.\n\\par PARAMETERS\nIn addition to parameters described in SegmentationLevelSetImageFilter, this filter adds the UpperThreshold and LowerThreshold. See ThresholdSegmentationLevelSetFunctionfor a description of how these values affect the segmentation.\n\\see  SegmentationLevelSetImageFilter\n\\see \n\\see  ThresholdSegmentationLevelSetFunction,\n\\see \n\\see  SparseFieldLevelSetImageFilter\n\n"
}
